#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

vector<pair<int, int>> findSubarraysWithZeroSum(vector<int>& arr) {
    // To store the starting and ending indices of the subarrays
    vector<pair<int, int>> result;
    
    // To store the sum of elements up to the current index
    unordered_map<int, vector<int>> prefixSumMap;
    
    int sum = 0; // Initialize sum of elements

    // Traverse through the given array
    for (int i = 0; i < arr.size(); i++) {
        sum += arr[i];

        // If sum is 0, we found a subarray from index 0 to i
        if (sum == 0) {
            result.push_back({0, i});
        }

        // If sum has been seen before, it means there are subarrays
        // which sum up to zero
        if (prefixSumMap.find(sum) != prefixSumMap.end()) {
            // All elements between previous occurrences of sum and this index sum to 0
            for (auto startIdx : prefixSumMap[sum]) {
                result.push_back({startIdx + 1, i});
            }
        }

        // Store the current sum in the map with the current index
        prefixSumMap[sum].push_back(i);
    }
    
    return result;
}

int main() {
    vector<int> arr = {1, 2, -3, 3, -1, 2};
    
    vector<pair<int, int>> subarrays = findSubarraysWithZeroSum(arr);
    
    if (subarrays.empty()) {
        cout << "No subarrays with zero sum found." << endl;
    } else {
        cout << "Subarrays with zero sum are: " << endl;
        for (auto& subarray : subarrays) {
            cout << "(" << subarray.first << ", " << subarray.second << ")" << endl;
        }
    }
    
    return 0;
}
