#include <iostream>
#include <vector>
#include <cmath> // for ceil

using namespace std;

// Function to merge two sorted arrays in-place
void mergeArrays(vector<int>& arr1, vector<int>& arr2, int m, int n) {
    int gap = ceil((float)(m + n) / 2); // Initial gap

    while (gap > 0) {
        int i = 0, j = gap;
        
        // Compare elements in the same array (arr1)
        while (j < (m + n)) {
            if (j < m && arr1[i] > arr1[j]) {
                swap(arr1[i], arr1[j]);
            }
            // Compare elements from arr1 and arr2
            else if (j >= m && i < m && arr1[i] > arr2[j - m]) {
                swap(arr1[i], arr2[j - m]);
            }
            // Compare elements in arr2
            else if (j >= m && i >= m && arr2[i - m] > arr2[j - m]) {
                swap(arr2[i - m], arr2[j - m]);
            }
            i++;
            j++;
        }

        // Reduce gap
        if (gap == 1) {
            gap = 0;
        } else {
            gap = ceil((float)gap / 2);
        }
    }
}

int main() {
    vector<int> arr1 = {1, 3, 5, 7};
    vector<int> arr2 = {2, 4, 6, 8};
    
    int m = arr1.size();
    int n = arr2.size();
    
    // Function to merge arr1 and arr2
    mergeArrays(arr1, arr2, m, n);
    
    // Display the merged arrays
    cout << "arr1: ";
    for (int i = 0; i < m; i++) {
        cout << arr1[i] << " ";
    }
    cout << endl;
    
    cout << "arr2: ";
    for (int i = 0; i < n; i++) {
        cout << arr2[i] << " ";
    }
    cout << endl;
    
    return 0;
}
